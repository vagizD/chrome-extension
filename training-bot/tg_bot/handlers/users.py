import logging
from aiogram import Dispatcher
from .utils import registered, notify_unregistered
from aiogram.utils.exceptions import MessageCantBeEdited
from aiogram.types import Message, CallbackQuery
from aiogram.dispatcher import FSMContext
from .keyboards import users_kb

async def to_menu(call: CallbackQuery, state: FSMContext):
    await call.answer()
    await open_menu(call.message, state)
async def start(message: Message):
    reply = [
        f"<b>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {message.from_user.first_name}!</b> üëã",
        f"–î–∞–Ω–Ω—ã–π –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –í–∞–º —É—á–∏—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–µ–π! –í—ã –º–æ–∂–µ—Ç–µ:",
        "‚Ä¢ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º —Å–ª–æ–≤–∞\n"
        "‚Ä¢ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—ã—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤\n"
        "‚Ä¢ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–ª–æ–≤ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ä–µ–∂–∏–º–∞—Ö",
        f"–ü–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º <u>–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–π —Ç–µ–ª–µ–≥—Ä–∞–º –∞–∫–∫–∞—É–Ω—Ç</u> –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è."
    ]
    await message.answer("\n\n".join(reply), reply_markup=users_kb.check_registry)

async def check_registry(call: CallbackQuery, state: FSMContext):
    if not await registered(call.bot, call.from_user.username):
        await notify_unregistered(call)
    else:
        await open_menu(call.message, state)

async def open_menu(message: Message, state: FSMContext):
    await state.finish()
    reply = [
        "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ?",
        "‚Ä¢ <b>–¢—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è:</b> –≤—ã–±–∏—Ä–∞–π—Ç–µ —Ä–µ–∂–∏–º—ã –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–æ–≤—ã—Ö –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤, –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –≤ "
        "–±—ã—Å—Ç—Ä—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö –∏ –Ω–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –æ –≥–ª–∞–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ.",
        "‚Ä¢ <b>–î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞:</b> –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –∏–∑—É—á–µ–Ω–Ω—ã–µ –∏ –Ω–µ–∏–∑—É—á–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞, –≤—Å–ø–æ–º–∏–Ω–∞–π—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã, "
        "—Å –∫–æ—Ç–æ—Ä—ã—Ö –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã —ç—Ç–∏ —Å–ª–æ–≤–∞, —É–¥–∞–ª—è–π—Ç–µ –Ω–µ–Ω—É–∂–Ω—ã–µ –∏ –ª–∏—à–Ω–∏–µ —Å–ª–æ–≤–∞.",
        "‚Ä¢ <b>–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É:</b> —Å–ª–µ–¥–∏—Ç–µ –∑–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —É–∂–µ –∏–∑—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤, –æ–±—â–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤.",
        "‚Ä¢ <b>–ü–æ–º–æ—â—å:</b> –∫–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ –±–∞–≥–∞—Ö, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö."
    ]
    try:
        await message.edit_text(text="\n\n".join(reply), reply_markup=users_kb.menu_choice)
    except MessageCantBeEdited:
        await message.answer(text="\n\n".join(reply), reply_markup=users_kb.menu_choice)
    except Exception as ex:
        logging.info(ex)

async def open_stats(call: CallbackQuery):
    if not await registered(call.bot, call.from_user.username):
        await notify_unregistered(call)
    else:
        database = call.bot.get("database")
        trained = await database.get_count_words(tg_tag=call.from_user.username, trained=True)
        not_trained = await database.get_count_words(tg_tag=call.from_user.username, trained=False)
        reply = [
            f"„Ä© ‚ûù –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤: {trained + not_trained}",
            f"‚úì  ‚ûù –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ –≤—ã—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤: {trained}",
            f"‚úï  ‚ûù –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –µ—â–µ –Ω–µ –∏–∑—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤: {not_trained}"
        ]
        await call.message.edit_text("\n\n".join(reply), reply_markup=users_kb.to_menu)

async def open_help(call: CallbackQuery):
    reply = [
        "–õ—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏ –∑–∞–º–µ—á–∞–Ω–∏—è, –≤ —Ç–æ–º —á–∏—Å–ª–µ –∏ –±–∞–≥–∏, –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é—Ç—Å—è –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:",
        "‚áâ   @I8usy_I8eaver\n‚áâ   @vagizdaudov\n‚áâ   @perkyfever"
    ]
    await call.message.edit_text(text="\n\n".join(reply), reply_markup=users_kb.to_menu)
async def add_word(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –∏ –ø–µ—Ä–µ–≤–æ–¥ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª. Ex: apple —è–±–ª–æ–∫–æ")
    await state.set_state("get_word")

async def add_word_execute(message: Message, state: FSMContext):
    db = message.bot.get("database")
    user = await db.get_user(tg_tag=message.from_user.username)
    if user is None:
        await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
    else:
        items = message.text.split(' ')
        await db.add_word(message.from_user.username, items[0], items[1])
        await message.answer("–°–ª–æ–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ")
    await state.finish()

def register_users(dp: Dispatcher):
    dp.register_callback_query_handler(to_menu, lambda call: call.data == "to_menu", state="*")
    dp.register_message_handler(start, commands=["start"], state="*")
    dp.register_message_handler(open_menu, commands=["menu"], state="*")
    dp.register_callback_query_handler(open_stats, lambda call: call.data == "show_stats")
    dp.register_callback_query_handler(check_registry, lambda call: call.data == "check_registry")
    dp.register_callback_query_handler(open_help, lambda call: call.data == "get_help")
    dp.register_message_handler(add_word, commands=['add_word'], state='*')
    dp.register_message_handler(add_word_execute, state='get_word')