from . import utils
from aiogram import Dispatcher
from aiogram.types import Message, CallbackQuery
from aiogram.dispatcher import FSMContext
from .keyboards import main_keyboards

async def back_to_menu(call: CallbackQuery):
    await call.answer()
    await utils.remove_prev_button(call.message)
    await open_menu(call.message)

async def start(message: Message): # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è /start
    reply = [
        f"<b>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {message.from_user.first_name}!</b> üëã",
        f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ.",
        f"–ü–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è. –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"
    ]
    await message.answer("\n\n".join(reply), reply_markup=main_keyboards.check_register_keyboard)

async def check_register(call: CallbackQuery): # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
    await call.answer()
    await utils.remove_prev_button(call.message)
    if not await utils.registered(call.bot.get("database"), call.from_user.id):
        await utils.notify_unregistered(call.message)
    else:
        await open_menu(call.message)

async def open_menu(message: Message): # –ü–∞–Ω–µ–ª—å –º–µ–Ω—é /menu
    await message.answer("–ß—Ç–æ –¥–µ–ª–∞–µ–º —Å–µ–≥–æ–¥–Ω—è?", reply_markup=main_keyboards.menu_keyboard)

async def open_stats(call: CallbackQuery): # –û—Ç–∫—Ä—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—ã—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤
    await call.answer()
    await utils.remove_prev_button(call.message)
    db = call.bot.get("database")
    user = await db.get_user(tg_id=call.from_user.id)
    trained_cnt = await db.count_user_trained_words(owner_id=user.get("user_id"))
    not_trained_cnt = await db.count_user_not_trained_words(owner_id=user.get("user_id"))
    reply = [
        f"–ó–∞ –≤—Å–µ –≤—Ä–µ–º—è –í—ã –¥–æ–±–∞–≤–∏–ª–∏ <b>{trained_cnt + not_trained_cnt}</b> —Å–ª–æ–≤/—Å–ª–æ–≤–∞!",
        f"–ò–∑ –Ω–∏—Ö –í—ã —É–∂–µ —É—Å–ø–µ–ª–∏ –≤—ã—É—á–∏—Ç—å <b>{trained_cnt}</b> —Å–ª–æ–≤/—Å–ª–æ–≤–∞.",
        f"–í–∞–º –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç –µ—â–µ –≤—ã—É—á–∏—Ç—å {not_trained_cnt} —Å–ª–æ–≤/—Å–ª–æ–≤–∞."
    ]
    await call.message.answer("\n\n".join(reply), reply_markup=main_keyboards.back_to_menu_keyboard)

async def open_help(call: CallbackQuery): # –û—Ç–∫—Ä—ã–≤–∞–µ—Ç —Ä–∞–∑–¥–µ–ª –ø–æ–º–æ—â–∏/–∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
    await call.answer()
    await utils.remove_prev_button(call.message)
    await call.message.answer("–ö–∞–∫–∞—è-—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è / –ö–æ–Ω—Ç–∞–∫—Ç—ã", reply_markup=main_keyboards.back_to_menu_keyboard)

async def add_word(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –∏ –ø–µ—Ä–µ–≤–æ–¥ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª. Ex: apple —è–±–ª–æ–∫–æ")
    await state.set_state("get_word")

async def add_word_execute(message: Message, state: FSMContext):
    db = message.bot.get("database")
    tg_id = await db.get_user(tg_id=message.from_id)
    if tg_id is None:
        await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∞–Ω—ã")
    else:
        items = message.text.split(' ')
        await db.add_word(tg_id.get("user_id"), items[0], items[1])
        await message.answer("–°–ª–æ–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ")
    await state.finish()

def register_users(dp: Dispatcher):
    dp.register_callback_query_handler(back_to_menu, lambda call: call.data == "back_to_menu")
    dp.register_message_handler(start, commands=["start"], state="*")
    dp.register_message_handler(open_menu, commands=["menu"], state="*")
    dp.register_callback_query_handler(open_stats, lambda call: call.data == "stats")
    dp.register_callback_query_handler(check_register, lambda call: call.data == "check_register")
    dp.register_callback_query_handler(open_help, lambda call: call.data == "help")
    dp.register_message_handler(add_word, commands=['add_word'], state='*')
    dp.register_message_handler(add_word_execute, state='get_word')